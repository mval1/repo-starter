name: setup-env
description: Initializes environment.

env:
  ARTIFACT_DIR: ./artifacts

inputs:
  token:
    description: >-
      TOKEN used to comment on pull requests.
    default: ${{ github.token }}
  node-version:
    description: Override node version
    required: false
    default: ''
  cache-prefix:
    description: Additional cache prefix
    required: false
    default: 'default'

outputs:
  node-version:
    value: ${{ steps.install.outputs.node-version }}
    description: Detected node version.

runs:
  using: 'composite'
  steps:
    - name: Env vars
      shell: bash
      run: |
        echo "COREPACK_ENABLE_DOWNLOAD_PROMPT=0" >> "$GITHUB_ENV"
        echo "YARN_ENABLE_GLOBAL_CACHE=0" >> "$GITHUB_ENV"
    - name: Detect node version
      id: detect-node
      run: |
        if [[ -z "${{ inputs.node-version }}" ]]; then
          echo "version=$(cat .nvmrc | tr -d '\n')" >> $GITHUB_OUTPUT
        else
          echo "version=${{ inputs.node-version }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Install NodeJS
      id: install
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.detect-node.outputs.version }}
    - name: Enable corepack
      run: corepack enable
      shell: bash
    - name: Restore yarn cache
      id: yarn-cache
      uses: actions/cache@v4
      with:
        path: |
          .yarn/install-state.gz
          .yarn/cache
          .yarn/unplugged
          .pnp.*
        key: ${{ inputs.cache-prefix }}-${{ hashFiles('yarn.lock') }}-${{ steps.detect-node.outputs.version }}
        restore-keys: |
          ${{ inputs.cache-prefix }}-${{ hashFiles('yarn.lock') }}-
          ${{ inputs.cache-prefix }}-
    - name: Install yarn project
      env:
        NPM_TOKEN: ${{ inputs.token }}
      run: yarn install --immutable
      shell: bash
    - name: Create artifacts directory
      run: mkdir -p ${{ env.ARTIFACT_DIR }}
      shell: bash
    - name: Configure git
      env:
        GIT_NAME: resard-dev
        GIT_EMAIL: dev@resard.com
        GIT_BRANCH: master
      run: |
        git config --global user.name "$GIT_NAME"
        git config --global user.email "$GIT_EMAIL"
        git config --global init.defaultBranch "$GIT_BRANCH"
      shell: bash
